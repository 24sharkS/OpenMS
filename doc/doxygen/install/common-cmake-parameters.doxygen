You can set more CMake variables adding <code>-DVARIABLE=VALUE</code> options when calling CMake.

The most important CMake variables are:

<table style="border-style:solid; border-collapse:collapse; border-color:#c0c0c0;">
  <tr>
    <td valign="top">\c OPENMS_CONTRIB_LIBS</td>
    <td>Seperate search path for the contrib libraries from github.com/OpenMS/contrib that is internally considered before
    CMAKE_PREFIX_PATH for searching, linking and adding include directories.</td>
  </tr>
  <tr>
    <td valign="top">\c CMAKE_PREFIX_PATH</td>
    <td>Additional search path for the contrib libraries.</td>
  </tr>
  <tr>
    <td valign="top">\c CMAKE_BUILD_TYPE</td>
    <td>[makefiles only; does not apply for XCode or VS] Should be either 'Release' (optimization enabled) or 'Debug' (debug info and
        precondition/postcondition checks enabled).
        @n The default is 'Release'.</td>
  </tr>
  <tr>
    <td valign="top">\c CMAKE_CXX_COMPILER</td>
    <td>Defines the C++ compiler to use.</td>
  </tr>
  <tr>
    <td valign="top">\c CMAKE_C_COMPILER</td>
    <td>Defines the C compiler to use. This should match the C++ compiler.
    Mixing compilers (e.g., <i>clang++</i> for C++ and <i>gcc</i> for C) can
    lead to undefined behaviour as some internal settings (e.g., %OpenMP
    support) are determined using the C compiler and are assumed to be the
    same for the C++ compiler.</td>
  </tr>
  <tr>
    <td valign="top">\c HAS_XSERVER</td>
    <td>Defines if a running X Server is available when building %OpenMS.
    As building parts of the documentation and running certain tests requires
    a running X Server, this flag can be used to disable those parts of the
    documentation and the tests that need an X Server. (Default: On)</td>
  </tr>
  <tr>
    <td valign="top">\c WITH_GUI</td>
    <td>Defines if the %OpenMS GUI tools (TOPPView, TOPPAS) should be built or
    not. These components need Qt > 4.7 which may not be available on some
    systems (specifically older CentOS / RHEL servers). If you plan to use
    %OpenMS without a GUI, set this flag to "Off" (Default: On)</td>
  </tr>
  <tr>
    <td valign="top">\c ENABLE_TUTORIALS</td>
    <td>Defines if %OpenMS should build and install the pdf tutorials.
    (Default: On)</td>
  </tr>
  <tr>
    <td valign="top">\c SEARCH_ENGINES_DIRECTORY (optional)</td>
    <td>The location where thirdparty search engines (X!Tandem, OMSSA, MyriMatch, MSGF+, Fido)
    are located. This directory should have the same structure as the example
    in the search engine repository at
    https://open-ms.svn.sourceforge.net/svnroot/open-ms/THIRDPARTY/SEARCHENGINES/.
    This directory is only needed to include thirdparty tools in the installer for %OpenMS.
    For using/running thirdparty tools, see section @ref linux_openms_environment </td>
  </tr>
  <tr>
    <td valign="top">\c PYOPENMS</td>
    <td>Use ON to also build the Python bindings, see also @ref pyOpenMS.</td>
  </tr>
  <tr>
    <td valign="top">\c CMAKE_INSTALL_PREFIX</td>
    <td>the path where the bin/ and lib/ directories should be installed to
        (when <pre>sudo make install</pre> is wished for a system-wide
        install: e.g. -DCMAKE_INSTALL_PREFIX=/usr/local/)
        <BR>
        <b>Note:</b> Moving these directories after installing is not supported.

        <b>For development, install prefixes are not supported. In this case %OpenMS must
         be built in place!</b>
   </td>
  </tr>
</table>
